var search_data = {"index":{"searchIndex":["menu","object","board_reset()","board_state()","get_menu_choice()","new()","side_choice()","square_input()","turn_reset()","tutorial()","win_check()","win_reset()"],"longSearchIndex":["menu","object","object#board_reset()","object#board_state()","menu#get_menu_choice()","menu::new()","object#side_choice()","object#square_input()","object#turn_reset()","object#tutorial()","object#win_check()","object#win_reset()"],"info":[["Menu","","Menu.html","","<p>Provides the choices for the user\n"],["Object","","Object.html","",""],["board_reset","Object","Object.html#method-i-board_reset","()","<p>Resets the Board after a game\n"],["board_state","Object","Object.html#method-i-board_state","( board )","<p>Displays and updates the state/status of the Tic Tac Toe Board\n"],["get_menu_choice","Menu","Menu.html#method-i-get_menu_choice","()",""],["new","Menu","Menu.html#method-c-new","( *menu_args )",""],["side_choice","Object","Object.html#method-i-side_choice","()","<p>asking user for input on which side they want\n"],["square_input","Object","Object.html#method-i-square_input","(side, board)","<p>square_input method takes input from the user validates that it is an\ninteger in the range of 1-9(incl) â€¦\n"],["turn_reset","Object","Object.html#method-i-turn_reset","()","<p>resets the turn counter after a game has been won/lost\n"],["tutorial","Object","Object.html#method-i-tutorial","()","<p>Explains the basic concept/rules of Tic Tac Toe\n"],["win_check","Object","Object.html#method-i-win_check","( board, win_condition )","<p>Checks if the win condition has been satisifed along the rows, columns, and\ndiagonals\n"],["win_reset","Object","Object.html#method-i-win_reset","()","<p>resets the win condition after a game has been won/lost\n"]]}}